name: Action to build and publish the project as a nuget package to github package registry

on:
  push:
    branches: [master]
      
jobs:
  build:
    runs-on: ubuntu-latest    
    outputs: 
      Version: ${{ steps.gitversion.outputs.SemVer }}
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }} 

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 #fetch-depth is needed for GitVersion
    
    #Build/pack the project
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Build and Pack NuGet package
      run: dotnet build Discovery.Master.sln /p:EnableWindowsTargeting=true -c Release
    - name: Upload NuGet package to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: nugetPackage
        path: bin/Release/ 
        
  release:
    runs-on: ubuntu-latest    
    needs: build
    if: github.ref == 'refs/heads/master' # only run job if on the master branch   
    
    steps: 
    #Push NuGet package to GitHub packages
    - name: Download nuget package artifact
      uses: actions/download-artifact@v4.1.7
      with:
        name: nugetPackage
    - name: Test nuget artifact download
      run: ls -R  
    - name: Prep packages
      run: dotnet nuget add source --username PaulBommel --password ${{ secrets.NUGET_PACKAGE_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/PaulBommel/index.json"
    - name: Push package to GitHub packages 
    # if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only release if there has been a commit/version change  
      run: dotnet nuget push *.nupkg --api-key ${{ secrets.NUGET_PACKAGE_TOKEN }} --source "github"
    
    #Create release
    #- name: Create Release
    #  if: 1 == 0 #needs.build.outputs.CommitsSinceVersionSource > 0 #Only release if there has been a commit/version change
    #  uses: actions/create-release@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.NUGET_PACKAGE_TOKEN }} 
    #  with:
    #    tag_name: ${{ needs.build.outputs.Version }}
    #    release_name: Release ${{ needs.build.outputs.Version }}
    #- name: Create Release
    #  if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only release if there has been a commit/version change
    #  uses: ncipollo/release-action@v1
    #  with:
    #    tag: ${{ needs.build.outputs.Version }}
    #    name: Release ${{ needs.build.outputs.Version }}
    #    artifacts: "nugetPackage/*"
    #    token: ${{ secrets.NUGET_PACKAGE_TOKEN }}
